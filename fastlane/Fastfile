# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

fastlane_version "2.121.0"
opt_out_usage

default_platform :ios

platform :ios do
  before_all do
    update_fastlane
  end

  desc "Runs all the tests"
  lane :test do
    cocoapods(use_bundle_exec: true, try_repo_update_on_error: true)
    scan
  end

  desc "Submit a new build to Apple TestFlight."
  lane :beta do
    cocoapods(use_bundle_exec: true, try_repo_update_on_error: true)
    match(git_url: ENV["MATCH_REPO"], username: ENV["MATCH_USER"], type: "appstore", readonly: true)

    if is_ci?
      # Bitrise can't figure out how to reconcile Xcode's automatic code signing
      # with Match's signing resources, so we have to disable automatic code signing
      # and manually specify provisioning profile and generic signing identify.
      disable_automatic_code_signing(profile_uuid: ENV["sigh_com.mapbox.examples_appstore"], code_sign_identity: "iPhone Distribution")
    end

    increment_build_number(build_number: latest_testflight_build_number + 1)
    gym(scheme: "Examples", include_bitcode: true)
    pilot(changelog: release_notes, distribute_external: true, groups: "Mapbox Testers")
  end

  desc "Generate release notes."
  private_lane :release_notes do
    changelog = changelog_from_git_commits(commits_count: 5, pretty: "- %s. (%ad)", date_format: "short", quiet: true)

    # Get maps SDK version number, but convert it to an XML plist first.
    mapbox_plist_path = Dir.glob("#{ENV['PWD']}/**/Mapbox.framework/Info.plist").first
    `plutil -convert xml1 #{mapbox_plist_path}`
    mapbox_sdk_version = get_info_plist_value(path: mapbox_plist_path, key: "MGLSemanticVersionString")

    "Maps SDK version: #{mapbox_sdk_version}\n\nRecent Commits\n#{changelog}"
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end
